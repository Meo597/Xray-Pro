name: Xray-install Automation Pipeline

on:
  schedule:
    - cron: "0 9 * * *"

  workflow_dispatch:

jobs:
  sync-and-release:
    runs-on: ubuntu-latest

    env:
      UPSTREAM_REPO: XTLS/Xray-install
      LATEST_BRANCH: Xray-install/latest
      ENHANCE_BRANCH_PREFIX: Xray-install/pro/
      RELEASE_BRANCH: Xray-install/release

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: Set up git config
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Fetch upstream latest commit id
        run: |
          echo "Fetching latest commit id from ${{ env.UPSTREAM_REPO }}."

          # Fetch the latest commit id
          latest_commit_id=""
          for attempt in {1..3}; do
            response=$(curl -s -w "%{http_code}" -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ env.UPSTREAM_REPO }}/commits?sha=main&per_page=1")
            http_code=$(echo "$response" | tail -n1)
            body=$(echo "$response" | head -n -1)
            if [ "$http_code" -eq 200 ]; then
              latest_commit_id=$(echo "$body" | jq -r '.[0].sha')
              break
            else
              echo "API request failed with status $http_code (attempt $attempt/3)."
              if [ "$attempt" -ge 3 ]; then
                echo "Error: Failed to fetch releases after 3 attempts. Check network or GitHub API limits."
                echo "LATEST_COMMIT_ID=" >> $GITHUB_ENV
                exit 1
              fi
              sleep 30
            fi
          done

          if [ -z "$latest_commit_id" ]; then
            echo "No commit found."
            echo "LATEST_COMMIT_ID=" >> $GITHUB_ENV
            exit 1
          fi

          echo "Latest commit id: $latest_commit_id."
          echo "LATEST_COMMIT_ID=$latest_commit_id" >> $GITHUB_ENV
          exit 0

      - name: Check and sync latest branch
        if: env.LATEST_COMMIT_ID != ''
        run: |
          # Add upstream remote and fetch its latest commits
          git remote add upstream https://github.com/${{ env.UPSTREAM_REPO }}.git || true
          echo "Fetching upstream commits..."
          if ! git fetch upstream --force; then
            echo "Error: Failed to fetch commits from upstream. Check network or permissions."
            echo "LATEST_UPDATED=false" >> $GITHUB_ENV
            exit 1
          fi

          # Check if the target commit exists locally after fetch
          echo "Verifying target commit ${{ env.LATEST_COMMIT_ID }} locally..."
          if git rev-parse --verify "${{ env.LATEST_COMMIT_ID }}^{commit}" >/dev/null 2>&1; then
            TARGET_COMMIT=$(git rev-parse "${{ env.LATEST_COMMIT_ID }}^{commit}")
            echo "Target commit ${{ env.LATEST_COMMIT_ID }} verified: $TARGET_COMMIT."

            # Check if the branch exists on the *remote* (origin)
            REMOTE_BRANCH_REF="refs/heads/${{ env.LATEST_BRANCH }}"
            echo "Checking remote branch existence: origin/${{ env.LATEST_BRANCH }}."
            # Use git ls-remote to check the remote ref. Output format: <hash>\t<ref>
            REMOTE_COMMIT_INFO=$(git ls-remote origin $REMOTE_BRANCH_REF)
            if [ $? -ne 0 ]; then
              echo "Error: Failed to check remote branch with git ls-remote. Check network or permissions."
              echo "LATEST_UPDATED=false" >> $GITHUB_ENV
              exit 1
            fi

            CURRENT_REMOTE_COMMIT=""
            BRANCH_EXISTS_REMOTELY=false
            if [ -n "$REMOTE_COMMIT_INFO" ]; then
              # Extract hash from "<hash>\t<ref>" format
              CURRENT_REMOTE_COMMIT=$(echo "$REMOTE_COMMIT_INFO" | cut -f1)
              BRANCH_EXISTS_REMOTELY=true
              echo "Remote branch origin/${{ env.LATEST_BRANCH }} exists and points to commit: $CURRENT_REMOTE_COMMIT."
            else
              echo "Remote branch origin/${{ env.LATEST_BRANCH }} does not exist."
            fi

            # Decide action based on remote existence and commit hash comparison
            if $BRANCH_EXISTS_REMOTELY && [ "$CURRENT_REMOTE_COMMIT" == "$TARGET_COMMIT" ]; then
              echo "Remote branch origin/${{ env.LATEST_BRANCH }} is already synced with commit ${{ env.LATEST_COMMIT_ID }}."
              echo "LATEST_UPDATED=false" >> $GITHUB_ENV
              exit 0
            elif $BRANCH_EXISTS_REMOTELY; then
              echo "Remote branch origin/${{ env.LATEST_BRANCH }} needs update (Current: $CURRENT_REMOTE_COMMIT, Target: $TARGET_COMMIT)."
              echo "Forcing push to update remote branch..."
              # Force push the target commit to the remote branch ref
              if git push --force origin "$TARGET_COMMIT:$REMOTE_BRANCH_REF"; then
                echo "LATEST_UPDATED=true" >> $GITHUB_ENV
                exit 0
              else
                echo "Error: Failed to update remote branch origin/${{ env.LATEST_BRANCH }}. Check permissions or branch protection rules."
                echo "LATEST_UPDATED=false" >> $GITHUB_ENV
                exit 1
              fi
            else
              echo "Remote branch origin/${{ env.LATEST_BRANCH }} does not exist. Creating it..."
              # Push the target commit to create the new remote branch ref
              if git push origin "$TARGET_COMMIT:$REMOTE_BRANCH_REF"; then
                echo "LATEST_UPDATED=true" >> $GITHUB_ENV
                exit 0
              else
                echo "Error: Failed to create the new remote branch origin/${{ env.LATEST_BRANCH }}. Check permissions."
                echo "LATEST_UPDATED=false" >> $GITHUB_ENV
                exit 1
              fi
            fi

          else
            echo "Error: Commit ${{ env.LATEST_COMMIT_ID }} could not be resolved after fetching from upstream."
            echo "LATEST_UPDATED=false" >> $GITHUB_ENV
            exit 1
          fi

      - name: Rebase enhance branches
        if: env.LATEST_COMMIT_ID != '' && env.LATEST_UPDATED == 'true'
        run: |
          TARGET_COMMIT=$(git rev-parse "${{ env.LATEST_COMMIT_ID }}^{commit}")
          echo "Rebasing enhance branches to commit: $TARGET_COMMIT (branch: ${{ env.LATEST_BRANCH }})."

          # Fetch all remote branches from origin
          if ! git fetch origin --quiet; then
            echo "Error: Failed to fetch branches from origin. Check network or permissions."
            echo "REBASE_FAILED=true" >> $GITHUB_ENV
            exit 1
          fi

          # List all remote branches starting with ENHANCE_BRANCH_PREFIX
          ENHANCE_BRANCHES=$(git branch -r | grep "origin/${{ env.ENHANCE_BRANCH_PREFIX }}" | sed 's|origin/||' | sort -V)
          if [ -z "$ENHANCE_BRANCHES" ]; then
            echo "No enhance branches starting with ${{ env.ENHANCE_BRANCH_PREFIX }} found."
            echo "REBASE_FAILED=false" >> $GITHUB_ENV
            exit 0
          fi

          echo "Found enhance branches:"
          echo "$ENHANCE_BRANCHES"

          # Loop through each enhance branch and rebase it to TARGET_COMMIT
          FAILED_BRANCHES=""
          for branch in $ENHANCE_BRANCHES; do
            echo "Processing branch: $branch."

            # Clean up any uncommitted changes before switching or rebasing
            git reset --hard 2>/dev/null || true
            git clean -fd 2>/dev/null || true

            # Checkout the branch locally
            if git checkout "$branch"; then
              # Rebase the branch onto TARGET_COMMIT
              if git rebase "$TARGET_COMMIT"; then
                echo "Successfully rebased $branch onto $TARGET_COMMIT."
                # Force push the rebased branch to remote
                if git push --force origin "$branch"; then
                  echo "Successfully pushed rebased branch $branch to remote."
                else
                  echo "Error: Failed to push rebased branch $branch to remote. Check permissions or branch protection rules."
                  FAILED_BRANCHES="$FAILED_BRANCHES $branch (push failed)"
                fi
              else
                echo "Rebase failed for $branch. Creating an issue for manual intervention."
                git rebase --abort
                FAILED_BRANCHES="$FAILED_BRANCHES $branch (rebase conflict)"
              fi
            else
              echo "Error: Failed to checkout $branch."
              FAILED_BRANCHES="$FAILED_BRANCHES $branch (checkout failed)"
            fi
          done

          # Summary of failed branches
          if [ -n "$FAILED_BRANCHES" ]; then
            echo "Rebase process completed with failures for the following branches:$FAILED_BRANCHES."

            # Create an issue for conflict resolution
            ISSUE_TITLE="Rebase Failures for Enhance Branches on ${{ env.LATEST_COMMIT_ID }}"
            ISSUE_BODY="The following branches failed to rebase onto commit \`${TARGET_COMMIT}\`:\n\n"
            ISSUE_BODY="$ISSUE_BODY| Branch | Failure Reason |\n"
            ISSUE_BODY="$ISSUE_BODY|--------|----------------|\n"
            echo "$FAILED_BRANCHES" | tr ' ' '\n' | while read -r failed; do
              if [ -n "$failed" ]; then
                BRANCH_NAME=$(echo "$failed" | cut -d'(' -f1 | xargs | sed 's/|/\\|/g')
                REASON=$(echo "$failed" | grep -oP '(?<=\().*(?=\))')
                ISSUE_BODY="$ISSUE_BODY| \`$BRANCH_NAME\` | $REASON |\n"
              fi
            done
            ISSUE_BODY="$ISSUE_BODY\nWorkflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            ISSUE_BODY="$ISSUE_BODY\nPlease manually resolve the conflicts or address the issues for these branches."
            ISSUE_JSON=$(jq -n --arg title "$ISSUE_TITLE" --arg body "$ISSUE_BODY" '{title: $title, body: ($body | gsub("\\\\n"; "\n"))}')

            response=$(curl -s -w "%{http_code}" -X POST \
              -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -d "$ISSUE_JSON" \
              "https://api.github.com/repos/${{ github.repository }}/issues")
            http_code=$(echo "$response" | tail -n1)
            body=$(echo "$response" | head -n -1)
            if [ "$http_code" -eq 201 ]; then
              echo "Successfully created issue for rebase conflict."
            else
              echo "Error: Failed to create issue for rebase conflict. HTTP Status: $http_code."
              echo "Response Body: $body."
            fi

            echo "REBASE_FAILED=true" >> $GITHUB_ENV
            exit 1
          else
            echo "Rebase process completed successfully for all branches."
            echo "Finished rebasing all enhance branches."
            echo "REBASE_FAILED=false" >> $GITHUB_ENV
            exit 0
          fi

      - name: Build release branch
        if: env.REBASE_FAILED == 'false'
        run: |
          echo "Creating release branch ${{ env.RELEASE_BRANCH }} based on ${{ env.LATEST_BRANCH }}."

          # Check if release branch already exists on remote
          RELEASE_BRANCH_REF="refs/heads/${{ env.RELEASE_BRANCH }}"
          echo "Checking if release branch ${{ env.RELEASE_BRANCH }} exists on remote..."
          RELEASE_BRANCH_EXISTS=$(git ls-remote origin $RELEASE_BRANCH_REF)
          if [ $? -ne 0 ]; then
            echo "Error: Failed to check remote branch with git ls-remote. Check network or permissions."
            echo "MERGE_FAILED=true" >> $GITHUB_ENV
            exit 1
          fi

          if [ -n "$RELEASE_BRANCH_EXISTS" ]; then
            echo "Release branch ${{ env.RELEASE_BRANCH }} already exists on remote. Deleting it..."
            # Delete remote branch
            if git push origin --delete "${{ env.RELEASE_BRANCH }}"; then
              echo "Successfully deleted remote branch ${{ env.RELEASE_BRANCH }}."
              # Prune local references to deleted remote branches
              if git fetch origin --prune --quiet; then
                echo "Pruned local references to deleted remote branches."
              else
                echo "Warn: Failed to prune local references."
              fi
            else
              echo "Error: Failed to delete remote branch ${{ env.RELEASE_BRANCH }}. Check permissions or branch protection rules."
              echo "MERGE_FAILED=true" >> $GITHUB_ENV
              exit 1
            fi
          fi

          # Clean up any uncommitted changes before switching
          git reset --hard 2>/dev/null || true
          git clean -fd 2>/dev/null || true

          # Create a new release branch based on latest branch
          echo "Creating release branch ${{ env.RELEASE_BRANCH }} based on ${{ env.LATEST_BRANCH }}..."
          if ! git checkout -b "${{ env.RELEASE_BRANCH }}" "origin/${{ env.LATEST_BRANCH }}"; then
            echo "Error: Failed to create and checkout release branch ${{ env.RELEASE_BRANCH }} from ${{ env.LATEST_BRANCH }}."
            echo "MERGE_FAILED=true" >> $GITHUB_ENV
            exit 1
          fi
          echo "Successfully created and checked out release branch ${{ env.RELEASE_BRANCH }}."

          # Fetch all enhance branches to merge
          ENHANCE_BRANCHES=$(git branch -r | grep "origin/${{ env.ENHANCE_BRANCH_PREFIX }}" | sed 's|origin/||' | sort -V)
          if [ -z "$ENHANCE_BRANCHES" ]; then
            echo "No enhance branches starting with ${{ env.ENHANCE_BRANCH_PREFIX }} found to merge."
            echo "MERGE_FAILED=false" >> $GITHUB_ENV
            exit 0
          fi

          echo "Merging enhance branches into release branch:"
          echo "$ENHANCE_BRANCHES"

          # Loop through each enhance branch and merge it into release branch
          FAILED_BRANCHES=""
          for branch in $ENHANCE_BRANCHES; do
            echo "Merging branch: $branch."
            if git merge --no-ff --no-edit "origin/$branch"; then
              echo "Successfully merged branch $branch into ${{ env.RELEASE_BRANCH }}."
            else
              echo "Error: Failed to merge branch $branch into ${{ env.RELEASE_BRANCH }}."
              FAILED_BRANCHES="$FAILED_BRANCHES $branch (merge conflict)"
              # Abort the merge to clean up conflict state
              git merge --abort 2>/dev/null || true
            fi
          done

          # Summary of failed branches
          if [ -n "$FAILED_BRANCHES" ]; then
            echo "Merge process completed with failures for the following branches:$FAILED_BRANCHES."

            # Create an issue for merge conflict
            ISSUE_TITLE="Merge Failures for Enhance Branches into ${{ env.RELEASE_BRANCH }}"
            ISSUE_BODY="The following branches failed to merge into \`${{ env.RELEASE_BRANCH }}\` based on \`${{ env.LATEST_BRANCH }}\`:\n\n"
            ISSUE_BODY="$ISSUE_BODY| Branch | Failure Reason |\n"
            ISSUE_BODY="$ISSUE_BODY|--------|----------------|\n"
            echo "$FAILED_BRANCHES" | tr ' ' '\n' | while read -r failed; do
              if [ -n "$failed" ]; then
                BRANCH_NAME=$(echo "$failed" | cut -d'(' -f1 | xargs | sed 's/|/\\|/g')
                REASON=$(echo "$failed" | grep -oP '(?<=\().*(?=\))')
                ISSUE_BODY="$ISSUE_BODY| \`$BRANCH_NAME\` | $REASON |\n"
              fi
            done
            ISSUE_BODY="$ISSUE_BODY\nWorkflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            ISSUE_BODY="$ISSUE_BODY\nPlease manually resolve the conflicts or address the issues for these branches."
            ISSUE_JSON=$(jq -n --arg title "$ISSUE_TITLE" --arg body "$ISSUE_BODY" '{title: $title, body: ($body | gsub("\\\\n"; "\n"))}')

            response=$(curl -s -w "%{http_code}" -X POST \
              -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -d "$ISSUE_JSON" \
              "https://api.github.com/repos/${{ github.repository }}/issues")
            http_code=$(echo "$response" | tail -n1)
            body=$(echo "$response" | head -n -1)
            if [ "$http_code" -eq 201 ]; then
              echo "Successfully created issue for merge conflict."
            else
              echo "Error: Failed to create issue for merge conflict. HTTP Status: $http_code."
              echo "Response Body: $body."
            fi

            echo "MERGE_FAILED=true" >> $GITHUB_ENV
            exit 1
          else
            # If merges were performed, push release branch
            if git push origin "${{ env.RELEASE_BRANCH }}"; then
              echo "Successfully pushed release branch ${{ env.RELEASE_BRANCH }} with merged enhances."
              echo "Finished creating and merging to release branch."
              echo "MERGE_FAILED=false" >> $GITHUB_ENV
              exit 0
            else
              echo "Error: Failed to push release branch ${{ env.RELEASE_BRANCH }}. Check permissions."
              echo "MERGE_FAILED=true" >> $GITHUB_ENV
              exit 1
            fi
          fi
