name: Sync Upstream Xray-core

on:
  schedule:
    - cron: "0 9 * * 1"

  workflow_dispatch:

jobs:
  sync-upstream:
    runs-on: ubuntu-latest

    env:
      UPSTREAM_REPO: XTLS/Xray-core
      STABLE_BRANCH: Xray-core/stable
      ENHANCE_BRANCH_PREFIX: Xray-core/pro/
      RELEASE_BRANCH: Xray-core/release

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: Setup Git config
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check upstream stable release
        run: |
          echo "Fetching latest stable release from ${{ env.UPSTREAM_REPO }}"

          # Fetch the latest stable release tag name
          latest_stable_tag=""
          for attempt in {1..3}; do
            response=$(curl -s -w "%{http_code}" "https://api.github.com/repos/${{ env.UPSTREAM_REPO }}/releases?per_page=100")
            http_code=$(echo "$response" | tail -n1)
            body=$(echo "$response" | head -n -1)
            if [ "$http_code" -eq 200 ]; then
              latest_stable_tag=$(echo "$body" | jq -r '.[] | select(.prerelease == false) | .tag_name' | head -1)
              break
            else
              echo "API request failed with status $http_code (attempt $attempt/3)"
              if [ "$attempt" -eq 3 ]; then
                echo "Error: Failed to fetch releases after 3 attempts. Check network or GitHub API limits."
                echo "LATEST_STABLE_TAG=" >> $GITHUB_ENV
                exit 1
              fi
              sleep 30
            fi
          done

          if [ -z "$latest_stable_tag" ]; then
            echo "No stable release found."
            echo "LATEST_STABLE_TAG=" >> $GITHUB_ENV
            exit 1
          fi

          echo "Latest stable tag: $latest_stable_tag"
          echo "LATEST_STABLE_TAG=$latest_stable_tag" >> $GITHUB_ENV

      - name: Sync upstream stable release
        if: env.LATEST_STABLE_TAG != ''
        run: |
          # Add upstream remote and fetch its tags
          git remote add upstream https://github.com/${{ env.UPSTREAM_REPO }}.git || true
          echo "Fetching upstream tags..."
          if ! git fetch upstream --tags --force; then
            echo "Error: Failed to fetch tags from upstream. Check network or permissions."
            echo "STABLE_UPDATED=false" >> $GITHUB_ENV
            exit 1
          fi

          # Check if the target tag commit exists locally after fetch
          echo "Verifying target tag ${{ env.LATEST_STABLE_TAG }} locally..."
          if git rev-parse --verify "refs/tags/${{ env.LATEST_STABLE_TAG }}^{commit}" >/dev/null 2>&1; then
            TARGET_COMMIT=$(git rev-parse "refs/tags/${{ env.LATEST_STABLE_TAG }}^{commit}")
            echo "Target tag ${{ env.LATEST_STABLE_TAG }} points to commit: $TARGET_COMMIT"

            # Check if the branch exists on the *remote* (origin)
            REMOTE_BRANCH_REF="refs/heads/${{ env.STABLE_BRANCH }}"
            echo "Checking remote branch existence: origin/${{ env.STABLE_BRANCH }}"
            # Use git ls-remote to check the remote ref. Output format: <hash>\t<ref>
            REMOTE_COMMIT_INFO=$(git ls-remote origin $REMOTE_BRANCH_REF)
            if [ $? -ne 0 ]; then
              echo "Error: Failed to check remote branch with git ls-remote. Check network or permissions."
              echo "STABLE_UPDATED=false" >> $GITHUB_ENV
              exit 1
            fi

            CURRENT_REMOTE_COMMIT=""
            BRANCH_EXISTS_REMOTELY=false
            if [ -n "$REMOTE_COMMIT_INFO" ]; then
              # Extract hash from "<hash>\t<ref>" format
              CURRENT_REMOTE_COMMIT=$(echo "$REMOTE_COMMIT_INFO" | cut -f1)
              BRANCH_EXISTS_REMOTELY=true
              echo "Remote branch 'origin/${{ env.STABLE_BRANCH }}' exists and points to commit: $CURRENT_REMOTE_COMMIT"
            else
              echo "Remote branch 'origin/${{ env.STABLE_BRANCH }}' does not exist."
            fi

            # Now, decide action based on remote existence and commit hash comparison
            if $BRANCH_EXISTS_REMOTELY && [ "$CURRENT_REMOTE_COMMIT" == "$TARGET_COMMIT" ]; then
              echo "Remote branch 'origin/${{ env.STABLE_BRANCH }}' is already synced with tag '${{ env.LATEST_STABLE_TAG }}'."
              echo "STABLE_UPDATED=false" >> $GITHUB_ENV
              exit 0
            elif $BRANCH_EXISTS_REMOTELY; then
              echo "Remote branch 'origin/${{ env.STABLE_BRANCH }}' needs update (Current: $CURRENT_REMOTE_COMMIT, Target: $TARGET_COMMIT)."
              echo "Forcing push to update remote branch..."
              # Force push the target commit to the remote branch ref
              if git push --force origin "$TARGET_COMMIT:$REMOTE_BRANCH_REF"; then
                echo "STABLE_UPDATED=true" >> $GITHUB_ENV
                exit 0
              else
                echo "Error: Failed to update remote branch 'origin/${{ env.STABLE_BRANCH }}'. Check permissions or branch protection rules."
                echo "STABLE_UPDATED=false" >> $GITHUB_ENV
                exit 1
              fi
            else
              echo "Remote branch 'origin/${{ env.STABLE_BRANCH }}' does not exist. Creating it..."
              # Push the target commit to create the new remote branch ref
              if git push origin "$TARGET_COMMIT:$REMOTE_BRANCH_REF"; then
                echo "STABLE_UPDATED=true" >> $GITHUB_ENV
                exit 0
              else
                echo "Error: Failed to create the new remote branch 'origin/${{ env.STABLE_BRANCH }}'. Check permissions."
                echo "STABLE_UPDATED=false" >> $GITHUB_ENV
                exit 1
              fi
            fi

          else
            echo "Error: Tag ${{ env.LATEST_STABLE_TAG }} commit could not be resolved after fetching from upstream."
            echo "STABLE_UPDATED=false" >> $GITHUB_ENV
            exit 1
          fi

      - name: Rebase enhance branches to stable release
        if: env.LATEST_STABLE_TAG != '' && env.STABLE_UPDATED == 'true'
        run: |
          TARGET_COMMIT=$(git rev-parse "refs/tags/${{ env.LATEST_STABLE_TAG }}^{commit}")
          echo "Rebasing enhance branches to commit: $TARGET_COMMIT (branch: ${{ env.STABLE_BRANCH }})"

          # Initialize result variables
          echo "REBASE_FAILED=false" >> $GITHUB_ENV
          FAILED_BRANCHES=""

          # Fetch all remote branches from origin
          if ! git fetch origin --quiet; then
            echo "Error: Failed to fetch branches from origin. Check network or permissions."
            echo "REBASE_FAILED=true" >> $GITHUB_ENV
            exit 1
          fi

          # List all remote branches starting with ENHANCE_BRANCH_PREFIX
          ENHANCE_BRANCHES=$(git branch -r | grep "origin/${{ env.ENHANCE_BRANCH_PREFIX }}" | sed 's|origin/||' | sort -V)
          if [ -z "$ENHANCE_BRANCHES" ]; then
            echo "No enhance branches starting with '${{ env.ENHANCE_BRANCH_PREFIX }}' found."
            echo "REBASE_FAILED=true" >> $GITHUB_ENV
            exit 0
          fi

          echo "Found enhance branches: $ENHANCE_BRANCHES"

          # Loop through each enhance branch and rebase it to TARGET_COMMIT
          for branch in $ENHANCE_BRANCHES; do
            echo "Processing branch: $branch"

            # Clean up any uncommitted changes before switching or rebasing
            git reset --hard 2>/dev/null || true
            git clean -fd 2>/dev/null || true

            # Checkout the branch locally
            if git checkout "$branch"; then
              # Rebase the branch onto TARGET_COMMIT
              if git rebase "$TARGET_COMMIT"; then
                echo "Successfully rebased $branch onto $TARGET_COMMIT"
                # Force push the rebased branch to remote
                if git push --force origin "$branch"; then
                  echo "Successfully pushed rebased branch $branch to remote"
                else
                  echo "Error: Failed to push rebased branch $branch to remote. Check permissions or branch protection rules."
                  FAILED_BRANCHES="$FAILED_BRANCHES $branch (push failed)"
                  echo "REBASE_FAILED=true" >> $GITHUB_ENV
                fi
              else
                echo "Rebase failed for $branch. Creating an issue for manual intervention."
                git rebase --abort
                FAILED_BRANCHES="$FAILED_BRANCHES $branch (rebase conflict)"
                echo "REBASE_FAILED=true" >> $GITHUB_ENV
                # Create an issue for conflict resolution
                ISSUE_TITLE="Rebase Conflict for branch $branch"
                ISSUE_BODY="Rebase of branch $branch onto commit $TARGET_COMMIT failed due to conflicts. Please resolve manually.\n\n- Branch: $branch\n- Target Commit: $TARGET_COMMIT\n- Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                if curl -X POST \
                  -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  -d "{\"title\": \"$ISSUE_TITLE\", \"body\": \"$ISSUE_BODY\"}" \
                  "https://api.github.com/repos/${{ github.repository }}/issues"; then
                  echo "Successfully created issue for rebase conflict of branch $branch"
                else
                  echo "Error: Failed to create issue for rebase conflict of branch $branch. Check token permissions or API limits."
                fi
              fi
            else
              echo "Error: Failed to checkout $branch"
              FAILED_BRANCHES="$FAILED_BRANCHES $branch (checkout failed)"
              echo "REBASE_FAILED=true" >> $GITHUB_ENV
            fi
          done

          # Summary of failed branches
          if [ -n "$FAILED_BRANCHES" ]; then
            echo "Rebase process completed with failures for the following branches:$FAILED_BRANCHES"
            echo "Finished rebasing all enhance branches."
            exit 1
          else
            echo "Rebase process completed successfully for all branches."
            echo "Finished rebasing all enhance branches."
            exit 0
          fi

      - name: Create and merge to release branch
        if: env.LATEST_STABLE_TAG != '' && env.STABLE_UPDATED == 'true' && env.REBASE_FAILED == 'false'
        run: |
          echo "Creating release branch '${{ env.RELEASE_BRANCH }}' based on '${{ env.STABLE_BRANCH }}'"

          # Check if release branch already exists on remote
          RELEASE_BRANCH_REF="refs/heads/${{ env.RELEASE_BRANCH }}"
          echo "Checking if release branch '${{ env.RELEASE_BRANCH }}' exists on remote..."
          RELEASE_BRANCH_EXISTS=$(git ls-remote origin $RELEASE_BRANCH_REF)
          if [ $? -ne 0 ]; then
            echo "Error: Failed to check remote branch with git ls-remote. Check network or permissions."
            exit 1
          fi

          if [ -n "$RELEASE_BRANCH_EXISTS" ]; then
            echo "Release branch '${{ env.RELEASE_BRANCH }}' already exists on remote. Deleting it..."
            # Delete remote branch
            if git push origin --delete "${{ env.RELEASE_BRANCH }}"; then
              echo "Successfully deleted remote branch '${{ env.RELEASE_BRANCH }}'"
              # Prune local references to deleted remote branches
              if git fetch origin --prune --quiet; then
                echo "Pruned local references to deleted remote branches"
              else
                echo "Error: Failed to prune local references. Continuing anyway."
              fi
            else
              echo "Error: Failed to delete remote branch '${{ env.RELEASE_BRANCH }}'. Check permissions or branch protection rules."
              exit 1
            fi
          fi

          # Clean up any uncommitted changes before switching
          git reset --hard 2>/dev/null || true
          git clean -fd 2>/dev/null || true

          # Checkout the stable branch as the base for release branch
          if git checkout "${{ env.STABLE_BRANCH }}"; then
            echo "Checked out base branch '${{ env.STABLE_BRANCH }}'"
            # Create new release branch
            if git checkout -b "${{ env.RELEASE_BRANCH }}"; then
              echo "Created new release branch '${{ env.RELEASE_BRANCH }}'"
              # Push the new release branch to remote
              if git push origin "${{ env.RELEASE_BRANCH }}"; then
                echo "Successfully pushed release branch '${{ env.RELEASE_BRANCH }}' to remote"
              else
                echo "Error: Failed to push release branch '${{ env.RELEASE_BRANCH }}' to remote. Check permissions."
                exit 1
              fi
            else
              echo "Error: Failed to create release branch '${{ env.RELEASE_BRANCH }}'"
              exit 1
            fi
          else
            echo "Error: Failed to checkout base branch '${{ env.STABLE_BRANCH }}'"
            exit 1
          fi

          # Fetch all enhance branches to merge
          ENHANCE_BRANCHES=$(git branch -r | grep "origin/${{ env.ENHANCE_BRANCH_PREFIX }}" | sed 's|origin/||' | sort -V)
          if [ -z "$ENHANCE_BRANCHES" ]; then
            echo "No enhance branches starting with '${{ env.ENHANCE_BRANCH_PREFIX }}' found to merge."
            exit 0
          fi

          echo "Merging enhance branches into release branch: $ENHANCE_BRANCHES"
          MERGE_FAILED=false
          FAILED_MERGES=""

          # Loop through each enhance branch and merge it into release branch
          for branch in $ENHANCE_BRANCHES; do
            echo "Merging branch: $branch"
            if git merge --no-ff --no-edit "origin/$branch"; then
              echo "Successfully merged branch $branch into '${{ env.RELEASE_BRANCH }}'"
            else
              echo "Error: Failed to merge branch $branch into '${{ env.RELEASE_BRANCH }}'. Creating an issue for manual intervention."
              MERGE_FAILED=true
              FAILED_MERGES="$FAILED_MERGES $branch"
              # Create an issue for merge conflict
              ISSUE_TITLE="Merge Conflict for branch $branch into ${{ env.RELEASE_BRANCH }}"
              ISSUE_BODY="Merge of branch $branch into ${{ env.RELEASE_BRANCH }} failed due to conflicts. Please resolve manually.\n\n- Enhance Branch: $branch\n- Release Branch: ${{ env.RELEASE_BRANCH }}\n- Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
              if curl -X POST \
                -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                -d "{\"title\": \"$ISSUE_TITLE\", \"body\": \"$ISSUE_BODY\"}" \
                "https://api.github.com/repos/${{ github.repository }}/issues"; then
                echo "Successfully created issue for merge conflict of branch $branch"
              else
                echo "Error: Failed to create issue for merge conflict of branch $branch. Check token permissions or API limits."
              fi
              # Abort the merge to clean up conflict state
              git merge --abort 2>/dev/null || true
            fi
          done

          # If merges were performed, push the updated release branch
          if ! $MERGE_FAILED; then
            if git push origin "${{ env.RELEASE_BRANCH }}"; then
              echo "Successfully pushed updated release branch '${{ env.RELEASE_BRANCH }}' with merged enhances"
            else
              echo "Error: Failed to push updated release branch '${{ env.RELEASE_BRANCH }}'. Check permissions."
              exit 1
            fi
          else
            echo "Merge process completed with failures for the following branches:$FAILED_MERGES"
            exit 1
          fi

          echo "Finished creating and merging to release branch."
