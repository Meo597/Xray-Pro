name: Sync Upstream Xray-core

on:
  schedule:
    - cron: "0 9 * * 1"
  workflow_dispatch:

jobs:
  sync-upstream:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: Setup Git config
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check upstream stable release
        env:
          UPSTREAM_REPO: XTLS/Xray-core
        run: |
          # Fetch the latest non-prerelease release tag name
          latest_stable_tag=$(curl -s "https://api.github.com/repos/$UPSTREAM_REPO/releases?per_page=100" | \
            jq -r '.[] | select(.prerelease == false) | .tag_name' | head -1)

          if [ -z "$latest_stable_tag" ]; then
            echo "No stable release found."
            exit 1
          fi

          echo "Latest stable tag: $latest_stable_tag"
          echo "LATEST_TAG=$latest_stable_tag" >> $GITHUB_ENV

      - name: Sync upstream
        env:
          UPSTREAM_REPO: XTLS/Xray-core
          ORIGIN_REPO_BRANCH: Xray-core-latest
        if: env.LATEST_TAG != ''
        run: |
          # Add upstream remote and fetch its tags
          git remote add upstream https://github.com/$UPSTREAM_REPO.git || true
          echo "Fetching upstream tags..."
          git fetch upstream --tags --force

          # Check if the target tag commit exists locally after fetch
          echo "Verifying target tag ${{ env.LATEST_TAG }} locally..."
          if git rev-parse --verify "refs/tags/${{ env.LATEST_TAG }}^{commit}" >/dev/null 2>&1; then
            TARGET_COMMIT=$(git rev-parse "refs/tags/${{ env.LATEST_TAG }}^{commit}")
            echo "Target tag ${{ env.LATEST_TAG }} points to commit: $TARGET_COMMIT"

            # Check if the branch exists on the *remote* (origin)
            REMOTE_BRANCH_REF="refs/heads/$ORIGIN_REPO_BRANCH"
            echo "Checking remote branch existence: origin/$ORIGIN_REPO_BRANCH"
            # Use git ls-remote to check the remote ref. Output format: <hash>\t<ref>
            REMOTE_COMMIT_INFO=$(git ls-remote origin $REMOTE_BRANCH_REF)

            CURRENT_REMOTE_COMMIT=""
            BRANCH_EXISTS_REMOTELY=false
            if [ -n "$REMOTE_COMMIT_INFO" ]; then
               # Extract hash from "<hash>\t<ref>" format
               CURRENT_REMOTE_COMMIT=$(echo "$REMOTE_COMMIT_INFO" | cut -f1)
               BRANCH_EXISTS_REMOTELY=true
               echo "Remote branch 'origin/$ORIGIN_REPO_BRANCH' exists and points to commit: $CURRENT_REMOTE_COMMIT"
            else
               echo "Remote branch 'origin/$ORIGIN_REPO_BRANCH' does not exist."
            fi

            # Now, decide action based on remote existence and commit hash comparison
            if $BRANCH_EXISTS_REMOTELY && [ "$CURRENT_REMOTE_COMMIT" == "$TARGET_COMMIT" ]; then
              echo "Remote branch 'origin/$ORIGIN_REPO_BRANCH' is already synced with tag '${{ env.LATEST_TAG }}'."
              exit 0
            elif $BRANCH_EXISTS_REMOTELY; then
              # Branch exists remotely but points to a different commit
              echo "Remote branch 'origin/$ORIGIN_REPO_BRANCH' needs update (Current: $CURRENT_REMOTE_COMMIT, Target: $TARGET_COMMIT)."
              echo "Forcing push to update remote branch..."
              # Force push the target commit to the remote branch ref
              git push --force origin "$TARGET_COMMIT:$REMOTE_BRANCH_REF"
              exit $?
            else
              # Branch does not exist remotely
              echo "Remote branch 'origin/$ORIGIN_REPO_BRANCH' does not exist. Creating it..."
              # Push the target commit to create the new remote branch ref
              git push origin "$TARGET_COMMIT:$REMOTE_BRANCH_REF" # No --force needed for creation
              exit $?
            fi

          else
            echo "Error: Tag ${{ env.LATEST_TAG }} commit could not be resolved after fetching from upstream."
            exit 1
          fi
